Ann2



import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)



X = np.array([
    [0, 0],
    [0, 1],
    [1, 0],
    [1, 1]
])

# Expected output for XOR
Y = np.array([
    [0],
    [1],
    [1],
    [0]
])





np.random.seed(42)

input_size = 2
hidden_size = 2
output_size = 1
learning_rate = 0.5
epochs = 10000

w_input_hidden = np.random.uniform(-1, 1, (input_size, hidden_size))
w_hidden_output = np.random.uniform(-1, 1, (hidden_size, output_size))

bias_hidden = np.zeros((1, hidden_size))
bias_output = np.zeros((1, output_size))

for epoch in range(epochs):
    hidden_input = np.dot(X, w_input_hidden) + bias_hidden
    hidden_output = sigmoid(hidden_input)

    final_input = np.dot(hidden_output, w_hidden_output) + bias_output
    final_output = sigmoid(final_input)

    error = Y - final_output

    d_output = error * sigmoid_derivative(final_output)
    d_hidden = d_output.dot(w_hidden_output.T) * sigmoid_derivative(hidden_output)

    w_hidden_output += hidden_output.T.dot(d_output) * learning_rate
    bias_output += np.sum(d_output, axis=0, keepdims=True) * learning_rate

    w_input_hidden += X.T.dot(d_hidden) * learning_rate
    bias_hidden += np.sum(d_hidden, axis=0, keepdims=True) * learning_rate

    if epoch % 1000 == 0:
        loss = np.mean(np.square(error))
        print(f"Epoch {epoch}, Loss: {loss:.4f}")



print("\nTrained XOR results:")
for i in range(len(X)):
    print(f"Input: {X[i]} => Output: {np.round(final_output[i][0])} (raw: {final_output[i][0]:.4f})")


